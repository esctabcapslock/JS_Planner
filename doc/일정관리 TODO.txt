일정관리 프로그램, plan.esclock.net


1. 서버가 압수되어도 개인정보 보호 / key 암호화
2. 1을 만족하면서 효율적인 자료구조
- 사용자별로 sqlite 파일 만들기?

서버는 암호를 열어서는 안됨 / 클라이언트에 모든 것을 보관해야 함.
그러면 파일 크기가 무작정 커질 수 있음.
해더-파일내용 으로 이어지게 만듦.
헤더에는, 각 일정이 어디에 대략 json으로 저장되어 있는지 나타냄
그리고 db에서 해당되는 부분을 뽑아오는거지.

대충 해더 길이를 보고 얼마나 사용중인지 알 수 있음


바이너리:

salt 64바이트
해제 확인 문자열 4바이트 -> 키의 해시의 해시로 암호화. 서버는 이를 확인하고 올바른 사용자에게 전송??
버전 2바이트
내용물... -> 파일로 저장. 파일 주소를 저장.

내용물:



문제: 탤래그램 전송
web 알림 API  -> 이거 웹 브라우저 켜저 있어야.
웹 Push_API 이거



정해진 시간에 알람을 보내려면 서버가 평문을 갖고 있어야 함 (또는 https 프로토콜을 미리 구현하여 쪼개넣기.)
사용자를 구분할 수 있는 정보, 정렬할 수 있는 날짜순 정보(?) 갖고 있어야 함.
사용자별로 .sqlite 파일 만들어서 저장 or 몽고db 사용 or 관계형 한 표에 저장 or 관계형 각각 표 만들어 저장

대략. 1e6~1e7개의 row가 있을때 분산배치된 20개의 정보를 뽑아낼 것.



//서버 저장 data
userid (int,hidden), user_nickname(str, pm), authkey(str)

// 로그인
authkey = sha512(salt0+pw)
{authed:bool} =  https(user_nickname, authkey) 


key1 = sha512(salt1+pw)
serverkey = sha512(salt2+key1)
전송_데이터 = aes(key1, "원본 데이터")
https(전송_데이터, serverkey)
// 서버는 전송_데이터 를 serverkey로 암호화해 보관
 

일부 구역마다 다른 key를 사용할까
- 구역을 어떻게 나누냐는 문제가 있음


대충 1e5개의 table이 있을 때, 임의의 100개 선택시: 52ms 소요
파일 크기: 3mb

1 4ms
2 9ms
3 8
4 13
5 26

한 테이블에 밀어 넣어도 문제는 없을듯????

한 테이블에 암호화하여 밀어넣는 대신,
한 테이블을 만들어서 1주치 알림 목록만 추가해주기.
프리 티어 동안 RDS를 사용해 보고,
끝나면 비싸니까 따로 빼서 사용하기.


INSERT INTO main (user,data) VALUES (3, "32")


from random import randint
n = 10_000_000
p = 10_000


for i in range(n):
    user = randint(0,n//p)
    print(f"INSERT INTO main (user,data) VALUES ({user}	, \"test-{user}\");")


어느 국가에 만들 것인가. 속도?

50~70 Mbps (넷플릭스)
10메가 1~2초

한국 리즌은 속도가 적절함
이왕 하는김에 다른 국가로 옮겨?
